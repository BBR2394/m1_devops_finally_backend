# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# This was made from the given example of cicleCI, not writen from scratch 

jobs:
  install:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.4
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.2
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements/dev.txt" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      # - run:
      #     name: start postgres
      #     command: postgres -D /var/lib/postgresql/data
      - run:
          name: install python and dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
      
      # we dont need to init because it is already init
      - run:
          name: flask upgrade
          environment:
            FLASK_APP: /home/circleci/repo/autoapp.py
            FLASK_DEBUG: 1
            POSTGRES_USER: postgres
            POSTGRES_DB: bdtest
            POSTGRES_PASSWORD: somePwd
            POSTGRES_PORT: 5432
            DATABASE_URL: postgresql://postgres:somePwd@localhost:5432/postgres
          command: |
            echo $FLASK_APP
            echo $FLASK_DEBUG
            echo $DATABASE_URL
            . venv/bin/activate
            flask db upgrade

      - run:
          name: flask test
          environment:
            FLASK_APP: /home/circleci/repo/autoapp.py
            FLASK_DEBUG: 1
            POSTGRES_USER: postgres
            POSTGRES_DB: bdtest
            POSTGRES_PASSWORD: somePwd
            POSTGRES_PORT: 5432
            DATABASE_URL: postgresql://postgres:somePwd@localhost:5432/postgres
            TESTENV: "ceci est juste pour tester la persistence des var d env"
          command: |
            echo $DATABASE_URL
            echo $TESTENV
            . venv/bin/activate
            flask test
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ checksum "requirements/dev.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io

      # - run:
      #     name: run tests
      #     command: |
      #       . venv/bin/activate
      #       python manage.py test

      # - store_artifacts:
      #     path: test-reports
      #     destination: test-reports

  # build:
  #   docker:
  #     - image: circleci/python:3.6.1
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - dependencies-{{ .Environment.CACHE_VERSION }}
  #           # fallback to using the latest cache if no exact match is found
  #           - dependencies-
  #     - run:
  #         name: a command
  #         command: echo "just to test "
  back-deploy-heroku:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: get api key
          command: echo $HEROKU_API_KEY
      - run:
          name: Heroku Deploy (master)
          environment:
            HEROKU_APP_NAME: afternoon-falls-29266
            FLASK_DEBUG: 1
          command: |
            echo $HEROKU_APP_NAME
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run:
          name: Smoke Test
          environment:
            HEROKU_APP_NAME: afternoon-falls-29266
          command: |
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://$HEROKU_APP_NAME.herokuapp.com/example`
              if [ "$HTTPCODE" -ne 200 ];then
                echo "heroku app not responding, failing deploy"
                exit 1
              fi

  apply-db-schema:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements/dev.txt" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      # - run:
      #     name: up run
      #     command: pip install --upgrade pip
      - run:
          name: install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
      # - run:
      #     name: flask help !
      #     command: flask --help
      # - run:
      #     name: flask migrate
      #     command: flask db migrate
      - run:
          name: flask upgrade
          command: flask db upgrade
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements/dev.txt" }}

  test:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements/dev.txt" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: a command to test
          command: echo "just to test "
      - run:
          name: install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
      - run:
          name: export env var
          command: export DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:$POSTGRES_PORT/$POSTGRES_USER
          #DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:$POSTGRES_PORT/$POSTGRES_USER
      - run:
          name: flask test
          command: flask test
      - run:
          name: remove env var
          command: unset DATABASE_URL

workflows:
  version: 2
  build-general:
    jobs:
      - install
      - back-deploy-heroku:
          requires:
            - install
      # - build:
      #     requires:
      #       - install
      # - apply-db-schema:
      #     requires:
      #       - install
      # - test:
      #     requires:
      #       - install