# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# This was made from the given example of cicleCI, not writen from scratch 

jobs:
  install:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.4
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.2
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/prod.txt" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      # - run:
      #     name: start postgres
      #     command: postgres -D /var/lib/postgresql/data
      - run:
          name: install python and dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
      
      # we dont need to init because it is already init
      - run:
          name: flask upgrade
          environment:
            FLASK_APP: /home/circleci/repo/autoapp.py
            FLASK_DEBUG: 1
            POSTGRES_USER: postgres
            POSTGRES_DB: bdtest
            POSTGRES_PASSWORD: somePwd
            POSTGRES_PORT: 5432
            DATABASE_URL: postgresql://postgres:somePwd@localhost:5432/postgres
          command: |
            echo $FLASK_APP
            echo $FLASK_DEBUG
            echo $DATABASE_URL
            . venv/bin/activate
            flask db upgrade

      - run:
          name: flask test
          environment:
            FLASK_APP: /home/circleci/repo/autoapp.py
            FLASK_DEBUG: 1
            POSTGRES_USER: postgres
            POSTGRES_DB: bdtest
            POSTGRES_PASSWORD: somePwd
            POSTGRES_PORT: 5432
            DATABASE_URL: postgresql://postgres:somePwd@localhost:5432/postgres
            TESTENV: "ceci est juste pour tester la persistence des var d env"
          command: |
            echo $DATABASE_URL
            echo $TESTENV
            . venv/bin/activate
            flask test
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/prod.txt" }}

  back-deploy-heroku:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Heroku Deploy (master)
          environment:
            HEROKU_APP_NAME: afternoon-falls-29266
            FLASK_DEBUG: 1
          command: |
            echo $HEROKU_APP_NAME
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run:
          name: Smoke Test
          environment:
            HEROKU_APP_NAME: afternoon-falls-29266
          command: |
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://$HEROKU_APP_NAME.herokuapp.com/api/articles`
              if [ "$HTTPCODE" -ne 200 ];then
                echo "heroku app not responding, failing deploy"
                exit 1
              fi

  docker-build-and-push:
    working_directory: /dockerapp
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: just an echo
          command: echo "hello docker !"
      - run:
          name: build app 
          command: |
            docker build --cache-from=app -t app .
      - deploy:
          name: we publish the app on docker hub
          environment:
            DOCKER_HUB_EMAIL: 
            DOCKER_HUB_USER_ID: 
            DOCKER_HUB_PWD:
            CIRCLE_BUILD_NUM:
          command: |
            docker login -e $DOCKER_HUB_EMAIL -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
            docker tag app $DOCKER_HUB_USER_ID/my-awesome-ci-expr:$CIRCLE_BUILD_NUM
            docker tag app $DOCKER_HUB_USER_ID/my-awesome-ci-expr:latest
            docker push $DOCKER_HUB_USER_ID/my-awesome-ci-expr:$CIRCLE_BUILD_NUM
            docker push $DOCKER_HUB_USER_ID/my-awesome-ci-expr:latest

workflows:
  version: 2
  build-general:
    jobs:
      - install
      - back-deploy-heroku:
          requires:
            - install
      - docker-build-and-push:
          requires:
            - install